# -*- coding: utf-8 -*-
"""Yahoo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VuwKoTLvvw7HuR3JWAV43J9Ybx6LLeM-

"""# **To be ran every hour:**"""

time_sleep = 0.8

#stock to search
option = 'NVDA250117C00140000'
ticker = 'NVDA'
r = 0.0034 #risk free sg rate as of oct 2024

import pandas as pd
import time
import re
import os
import pyodbc
import pytz
import numpy as np
import statistics
from math import *
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys

def web_driver():
  options = webdriver.ChromeOptions()
  options.add_argument("--verbose")
  options.add_argument("--no-sandbox")
  options.add_argument("--headless")
  options.add_argument("--disable-gpu")
  options.add_argument("--window-soze = 1920, 1200")
  options.add_argument("--disable-dev-shm-usage")
  driver = webdriver.Chrome(options = options)
  return driver

driver = web_driver()

def N(x):
  return (1.0 + erf(x / sqrt(2.0))) / 2.0

def deltac(S, K, r, y, τ, σ):
  d1 = 1/(σ * np.sqrt(τ)) * (np.log(S * np.exp(-y * (τ)) / K) + (r - y + σ**2/2)*(τ) )
  return np.exp(-y * τ) * N(d1)

def c(S, K, r, y, τ, σ):
  d1 = 1/(σ * np.sqrt(τ)) * (np.log(S * np.exp(-y * (τ)) / K) + (r - y + σ**2/2)*(τ) )
  d2 = d1 - σ * np.sqrt(τ)
  return S * np.exp(-y * (τ)) * N(d1) - K * np.exp(-r * (τ)) * N(d2)

df = pd.read_csv('/home/briansim74/Desktop/NVDA.csv')

#df.head()

#go to NVDA stock page
url = "https://sg.finance.yahoo.com/quote/"+ ticker + "/"

# Open the webpage
driver.get(url)

# Wait for the page to load
time.sleep(time_sleep)

S = float(driver.find_elements(By.XPATH, '/html/body/div[2]/main/section/section/section/article/section[1]/div[2]/div[1]/section/div/section[1]/div[1]/fin-streamer[1]')[0].text.splitlines()[0])

y = float(re.findall(r'\(.*?\)', driver.find_elements(By.XPATH, '//*[@id="nimbus-app"]/section/section/section/article/div[2]')[0].text.splitlines()[27])[0][1:-2]) / 100

print("Stock Price:", S)
print("Dividend Yield:", y)

# get historical data for volatility
historical = driver.find_element(By.XPATH, '//*[@id="nimbus-app"]/section/section/aside/section/nav/ul/li[5]/a')
# create action chain object
action = ActionChains(driver)
# click the item
action.click(on_element = historical)
# perform the operation
action.perform()

time.sleep(time_sleep)

#20 day average volatility
days = 20

historical_table = driver.find_elements(By.XPATH, '//*[@id="nimbus-app"]/section/section/section/article/div[1]/div[3]/table')[0].text.splitlines()

vol_row_log = []
Y = []

for i in range(days):
  adj_close = float((historical_table[i + 3].split())[-2])
  vol_row_log.append(log(adj_close))

for i in range(days - 1):
  Y.append(vol_row_log[i] - vol_row_log[i+1])

Y_avg = statistics.fmean(Y)

#get annual volatility
vol = sqrt(sum((np.array(Y) - Y_avg)**2) / (days - 1)) * sqrt(252)
print("20 day volatility:", vol)

#go to options page to get strike price and call price
url = "https://sg.finance.yahoo.com/quote/"+ option + "/"

# Open the webpage
driver.get(url)

# Wait for the page to load
time.sleep(time_sleep)

option_table = driver.find_elements(By.XPATH, '//*[@id="nimbus-app"]/section/section/section/article/div[2]')[0].text.splitlines()

K = float(option_table[9])
#print(option_table)

call_price = float(driver.find_elements(By.XPATH, '//*[@id="nimbus-app"]/section/section/section/article/section[1]/div[2]/div[1]/section/div/section/div[1]/fin-streamer[1]')[0].text.splitlines()[0])

print("Strike_Price:", K)
print("Call_Price:", call_price)

#current time
date = datetime.now(tz=pytz.timezone('America/New_York')).replace(microsecond = 0).replace(tzinfo=None)
print("NYC current date and time:", date)

#get time to maturity using 1st row
maturity = datetime.strptime(df['Maturity'].iloc[0], '%Y-%m-%d %H:%M:%S')
time_to_maturity = maturity - date
print("Time to maturity:", time_to_maturity)
#print(time_to_maturity.days, "days", time_to_maturity.seconds, "seconds")

#time to maturity (seconds)
tau_seconds = float(time_to_maturity.days) * 24 * 3600 + float(time_to_maturity.seconds)
#print(tau_seconds, "seconds")

#time to maturity (years)
tau_years = tau_seconds / (365 * 24 * 3600)
#print(tau_years, "years")

bsm_price = c(S, K, r, y, tau_years, vol)
print("Call_Price:", call_price)
print("BSM_Price:", bsm_price)

delta = df['Delta'].iloc[-1]

K = df['Strike_Price'].iloc[0]

new_delta = deltac(S, K, r, y, tau_years, vol) #vols to be calculated daily

print("Current delta:", delta)
print("New delta:", new_delta)

print("Sell off", delta, "-", new_delta, "shares of stock")

change_in_delta = delta - new_delta
print("Change in delta:", change_in_delta)

previous_date = datetime.strptime(df['Date_Time'].iloc[-1], '%Y-%m-%d %H:%M:%S')
print("Previous date:", previous_date)

elapsed_days = (date - previous_date).days
elapsed_seconds = (date - previous_date).seconds

elapsed_time_seconds = elapsed_days * 24 * 3600 + elapsed_seconds
#print("Elapsed time (seconds):", elapsed_time_seconds)

elapsed_time_years = elapsed_time_seconds / (365 * 24 * 3600)
print("Elapsed time (years):", elapsed_time_years)

#profit from selling shares
share_profit = change_in_delta * S
print("Profit from shares:", share_profit)

#amount owed to bank before calculating interest
print("Current amount owed to bank before interest:", df['Amount_Borrowed_from_Bank'].iloc[-1])

#amount owed to bank after calculating interest
amount = df['Amount_Borrowed_from_Bank'].iloc[-1] * np.exp(r * elapsed_time_years)
print("Current amount owed to bank after interest:", amount)

#new amount owed to bank after repaying profit
new_amount = amount - share_profit
print("New amount owed to bank after repaying profit from change in shares:", new_amount)

#wealth
portfolio = delta * S - new_amount
print("Value of Replicating Portfolio:", portfolio)

#current profit
profit = format(portfolio - call_price, '.10f')
print("Profit from Closing Position:", profit)

#add new row
row = [date, maturity, S, K, new_amount, r, y, vol, bsm_price, call_price, delta, portfolio, profit]

df.loc[len(df.index)] = row
#df.head()

#df.head()

"""# **Scripting**"""

#stock to search
option = 'NVDA250117C00140000'
ticker = 'NVDA'
r = 0.0034 #risk free sg rate as of oct 2024

#connect to Azure SQL server using pyodbc
server = '*****'
database = '*****'
username = '*****'
password = '*****'
cnxn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER='+server+';DATABASE='+database+';UID='+username+';PWD='+ password)
cursor = cnxn.cursor()

#delete data in table
cursor.execute('''TRUNCATE TABLE dbo.NVDA''')

#execute command
cnxn.commit()

#export csv file
df.to_csv(r'/home/briansim74/Desktop/NVDA.csv', index = False)

#BCP utility bulk insert updated CSV file into SQL server
os.system('/opt/mssql-tools18/bin/bcp dbo.NVDA in "/home/briansim74/Desktop/NVDA.csv" -S *****.database.windows.net -d ***** -U ***** -P ***** -c -F 2 -t "," -r "0x0a"')

#close cursor
cursor.close()

#quit driver
driver.quit()
